
--Расчёт LTV

SELECT 
    DATE_TRUNC('month', u.created_at)::date AS account_creation_month,
    SUM(o.total_amt) / COUNT(DISTINCT o.user_id) AS ltv
FROM 
    tools_shop.users AS u
INNER JOIN 
    tools_shop.orders AS o ON u.user_id = o.user_id
GROUP BY 
    account_creation_month;


--Расчёт конверсии

SELECT ROUND(COUNT(DISTINCT o.user_id) * 100.0 / COUNT(DISTINCT u.user_id), 1) AS conversion_rate
FROM tools_shop.users AS u
LEFT JOIN tools_shop.orders AS o ON u.user_id = o.user_id;

--Расчёт arppu

SELECT 
CAST(DATE_TRUNC('year', CAST(o.created_at AS DATE)) AS DATE) AS year_arppu,
ROUND(SUM(o.total_amt) / COUNT(DISTINCT u.user_id), 2) AS arppu
    
FROM tools_shop.users u
JOIN tools_shop.orders o ON u.user_id = o.user_id
GROUP BY CAST(DATE_TRUNC('year', CAST(o.created_at AS DATE)) AS DATE);


--Расчёт РОИ

SELECT TO_DATE(TO_CHAR(DATE_TRUNC('month', dc.created_at), 'YYYY-MM') || '-01', 'YYYY-MM-DD') AS month,
       --SUM(dc.costs) AS total_costs,
       --SUM(dr.revenue) AS total_revenue,
       ROUND(SUM(dr.revenue) * 100.0 / NULLIF(SUM(dc.costs), 0), 6) AS ROI
FROM
  (SELECT DATE_TRUNC('month', created_at) AS created_at,
          SUM(costs) AS costs
   FROM tools_shop.costs
   GROUP BY DATE_TRUNC('month', created_at)) dc
JOIN
  (SELECT DATE_TRUNC('month', paid_at) AS paid_month,
          SUM(total_amt) AS revenue
   FROM tools_shop.orders
   GROUP BY DATE_TRUNC('month', paid_at)) dr ON DATE_TRUNC('month', dc.created_at) = DATE_TRUNC('month', dr.paid_month)
GROUP BY DATE_TRUNC('month', dc.created_at)
ORDER BY DATE_TRUNC('month', dc.created_at);






-- Сформированный отчёт для расчёта процента аппрува за определённую дату. 

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	 	DECLARE @D_START DATETIME, 
		@D_END DATETIME;
	
		SET @D_START = '2023-10-28';
		SET @D_END = '2023-11-10';
		SELECT
		pr.Name,
		lr.Area,
		COUNT(lr.id) AS total_records,
		approved_records.approved_entries,
		ROUND(CAST(reject_records.reject_entries AS float) / CAST(COUNT(lr.id) AS float), 4) AS percent_denial,
		approved_records.average_value AS average_value,
		ROUND(SUM(CAST(lr.Approval AS float)) / CAST(COUNT(lr.id) AS float), 4) AS dirty_approval,
		ROUND(SUM(CAST(lr.Approval AS float)) / CAST(approved_records.approved_entries + reject_records.reject_entries AS float), 4) AS operational_approval
		FROM Record lr 
		LEFT JOIN Product pr ON lr.Product =pr.id
		LEFT JOIN (
				SELECT
				pr.Name AS approved_product,
				lr.Area AS  approved_area,	
				pr.SubType AS approved_subtype,
				CAST(COUNT(lr.id) AS float) AS approved_entries,
				AVG(lr.TotalAmountWithoutDeadstock) AS average_value
				FROM Record lr 
				LEFT JOIN Product pr ON lr.Product = pr.id
				WHERE lr.Approval = 1
				AND lr.DateOfRecord BETWEEN @D_START AND @D_END
				AND lr.Type = 0
				GROUP BY pr.Name, lr.Area, pr.SubType
					) AS approved_records
				ON pr.Name = approved_records.approved_product
			LEFT JOIN (
				SELECT
				pr.Name AS reject_product,
				lr.Area AS  reject_area,	
				CAST(COUNT(lr.id) AS float) AS  reject_entries
				FROM Record lr
				LEFT JOIN Product pr ON lr.Product = pr.id
				WHERE lr.RecordStatus = 4
				AND lr.DateOfRecord BETWEEN  @D_START AND @D_END
				AND lr.Type = 0
				GROUP BY pr.Name, lr.Area
					) AS reject_records
				ON pr.Name = reject_records.reject_product
		WHERE lr.DateOfRecord BETWEEN @D_START AND @D_END
		AND lr.Type = 0
		GROUP BY pr.Name, lr.Area, approved_records.approved_entries , approved_records.average_value, reject_records.reject_entries






--Статистика лидов по продуктам и странам за определенный период

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

WITH cte_leads AS (
  SELECT
    l.oid,
    p.Name AS product,
    l.Country AS GEO,
    p.ProductSubType,
    l.TotalAmountWithoutDeadstock,
    l.LeadStatus,
    l.LeadType,
    l.Approve,
    l.DateOfOrder
  FROM Lead l
  LEFT JOIN Product p ON l.Product = p.Oid
  WHERE l.DateOfOrder BETWEEN '2022-10-29' AND '2022-11-05'
    AND l.LeadType = 0
    )
SELECT
  'Product' AS Name,
  'Country' AS Country,
  COUNT(oid) AS total_leads,
  COUNT(CASE WHEN Approve = 1 THEN oid END) AS approved_leads,
  ROUND(CAST(COUNT(CASE WHEN LeadStatus = 4 THEN oid END) AS float) / NULLIF(COUNT(oid), 0), 4) AS percent_rejection,
  AVG(TotalAmountWithoutDeadstock) AS avg_check,
  ROUND(SUM(CAST(Approve AS float)) / NULLIF(COUNT(Oid), 0), 4) AS dirt_approve,
  ROUND(CAST(COUNT(CASE WHEN Approve = 1 THEN oid END) AS float) / NULLIF((CAST(COUNT(CASE WHEN Approve = 1 THEN oid END) AS float) + CAST(COUNT(CASE WHEN LeadStatus = 4 THEN oid END) AS float)), 0), 4) AS work_approve
FROM cte_leads
GROUP BY product, GEO
ORDER BY product;









